#ifdef HAVE_CONFIG_H
#  include <config.h>
#endif

#include <gtk/gtk.h>

#include "callbacks.h"
#include "interface.h"
#include "support.h"
#include "reservation.h"


	
typedef struct {
    char id_parking[10];
    char nom[50];
    char adresse[100];
    int capacite;
    int places_libres;
    char type_parking[20];
} Parking;
typedef struct{
    char id_connect[10];
    char mdp_connect[50];
} Users;

int jour,mois,annee,jour_modif, mois_modif, annee_modif;
int mode_paiement = 1;
int mode_paiement_modif =1;
void
on_SO_auth_connect_button_clicked      (GtkWidget       *button,
                                        gpointer         user_data)
{
GtkWidget *input1, *input2, *output1, *output2;
int tr = 0;
char id[10],mdp[50];
GtkNotebook *notebook;
Users user;
input1 = lookup_widget(button, "SO_id_auth_entry");
input2 = lookup_widget(button, "SO_mdp_auth_entry");
notebook = GTK_NOTEBOOK(lookup_widget(button, "notebook1"));

strcpy(id, gtk_entry_get_text(GTK_ENTRY(input1)));
strcpy(mdp, gtk_entry_get_text(GTK_ENTRY(input2)));

FILE *f = fopen("users.txt","r");
if (f != NULL){
while (fscanf(f,"%s %s\n",
	user.id_connect,
	user.mdp_connect)!=EOF){

if (strcmp(user.id_connect,id)==0){
	if (strcmp(user.mdp_connect,mdp)==0){tr=1;}
}

}
}
fclose(f);
if (tr == 1){
gtk_notebook_set_current_page(notebook, 1);}
else {
GtkWidget *dialog = gtk_message_dialog_new(GTK_WINDOW(gtk_widget_get_toplevel(button)),
                                                   GTK_DIALOG_DESTROY_WITH_PARENT,
                                                   GTK_MESSAGE_ERROR,
                                                   GTK_BUTTONS_OK,
                                                   "Erreur : ID ou mot de passe est incorrect");
        gtk_dialog_run(GTK_DIALOG(dialog));
        gtk_widget_destroy(dialog);
}

}


void
on_SO_acceuil_ajout_button_clicked     (GtkWidget       *button,
                                        gpointer         user_data)
{
GtkNotebook *notebook;
notebook = GTK_NOTEBOOK(lookup_widget(button, "notebook1"));
gtk_notebook_set_current_page(notebook, 2);
}


void
on_SO_acceuil_modif_button_clicked     (GtkWidget       *button,
                                        gpointer         user_data)
{
GtkNotebook *notebook;
notebook = GTK_NOTEBOOK(lookup_widget(button, "notebook1"));
gtk_notebook_set_current_page(notebook, 3);
}


void
on_SO_acceuil_affiche_button_clicked   (GtkWidget       *button,
                                        gpointer         user_data)
{
GtkNotebook *notebook;
notebook = GTK_NOTEBOOK(lookup_widget(button, "notebook1"));
gtk_notebook_set_current_page(notebook, 5);
}


void
on_SO_acceuil_supp_button_clicked      (GtkWidget       *button,
                                        gpointer         user_data)
{
GtkNotebook *notebook;
notebook = GTK_NOTEBOOK(lookup_widget(button, "notebook1"));
gtk_notebook_set_current_page(notebook, 4);
}


void
on_calendar1_day_selected              (GtkCalendar     *calendar,
                                        gpointer         user_data)
{

}


void
on_SO_banque_ajout_radiobutton_toggled (GtkToggleButton *togglebutton,
                                        gpointer         user_data)
{
if (gtk_toggle_button_get_active(GTK_TOGGLE_BUTTON (togglebutton)))
	mode_paiement = 1;
}


void
on_SO_espece_ajout_radiobutton_toggled (GtkToggleButton *togglebutton,
                                        gpointer         user_data)
{
if (gtk_toggle_button_get_active(GTK_TOGGLE_BUTTON (togglebutton)))
	mode_paiement = 2;
}


void
on_SO_ajout_res_button_clicked         (GtkWidget       *button,
                                        gpointer         user_data)
{
Reservation res ;
GtkWidget *id_personnel, *id_reservation, *id_parking;
GtkWidget *heure_debut,*minute, *duree, *type;
GtkWidget *calendar;  

  id_personnel = lookup_widget(button, "SO_id_ajout_entry");
  id_reservation = lookup_widget(button, "SO_id_res_ajout_entry");
  id_parking= lookup_widget(button, "SO_parking_ajout_entry");
  heure_debut = lookup_widget(button, "SO_heure_ajout_spinbutton");
  minute = lookup_widget(button, "SO_minute_ajout_spinbutton");
  duree = lookup_widget(button, "SO_duree_ajout_spinbutton");
  type = lookup_widget(button, "SO_type_vehicule_ajout_combobox");
  calendar = lookup_widget(button, "calendar1");



  
  strcpy(res.id_personnel, gtk_entry_get_text(GTK_ENTRY(id_personnel)));
  strcpy(res.id_reservation, gtk_entry_get_text(GTK_ENTRY(id_reservation)));
  strcpy(res.id_parking, gtk_entry_get_text(GTK_ENTRY(id_parking)));
  res.heure_debut = gtk_spin_button_get_value_as_int(GTK_SPIN_BUTTON(heure_debut));
  res.minute_debut = gtk_spin_button_get_value_as_int(GTK_SPIN_BUTTON(minute));
  res.duree = gtk_spin_button_get_value_as_int(GTK_SPIN_BUTTON(duree));
  strcpy(res.type_vehicule , gtk_combo_box_get_active_text(GTK_COMBO_BOX(type)));
  if (mode_paiement == 1) {strcpy(res.mode_paiement,"bancaire");}
  else {strcpy(res.mode_paiement,"espece");}


 
    gtk_calendar_get_date(GTK_CALENDAR(calendar), &jour, &mois, &annee);


    res.annee = annee;
    res.mois = mois + 1; 
    res.jour = jour;
  
int ajout_res = ajouter_reservation("reservation.txt",res);
}


void
on_calendar_modif_day_selected         (GtkCalendar     *calendar,
                                        gpointer         user_data)
{

}


void
on_SO_chercher_modif_button_clicked    (GtkWidget       *button,
                                        gpointer         user_data)
{
char id_res_modif[10];
Reservation res ;
GtkWidget *id_personnel, *id_reservation, *id_parking;
GtkWidget *heure_debut,*minute, *duree, *type;
GtkWidget *calendar;  

  
  id_personnel = lookup_widget(button, "SO_id_modif_entry");
  id_reservation = lookup_widget(button, "SO_id_res_modif_entry");
  id_parking= lookup_widget(button, "SO_parking_modif_entry");
  heure_debut = lookup_widget(button, "SO_heure_modif_spinbutton");
  minute = lookup_widget(button, "SO_minute_modif_spinbutton");
  duree = lookup_widget(button, "SO_duree_modif_spinbutton");
  type = lookup_widget(button, "SO_type_vehicule_modif_combobox");
  calendar = lookup_widget(button, "calendar_modif");

strcpy(id_res_modif, gtk_entry_get_text(GTK_ENTRY(id_reservation)));

res = chercher_reservation("reservation.txt",id_res_modif);

gtk_entry_set_text(GTK_ENTRY(id_personnel),res.id_personnel);
gtk_entry_set_text(GTK_ENTRY(id_parking),res.id_parking);
gtk_spin_button_set_value(GTK_SPIN_BUTTON(heure_debut), res.heure_debut);
gtk_spin_button_set_value(GTK_SPIN_BUTTON(minute), res.minute_debut);
gtk_spin_button_set_value(GTK_SPIN_BUTTON(duree), res.duree);

    int type_index = -1;
    if (strcmp(res.type_vehicule, "Voiture") == 0) {
        type_index = 0;
    } else if (strcmp(res.type_vehicule, "Moto") == 0) {
        type_index = 1;
    } else if (strcmp(res.type_vehicule, "Camion") == 0) {
        type_index = 2;
    }
    
    if (type_index != -1) {
        gtk_combo_box_set_active(GTK_COMBO_BOX(type), type_index);
    }

gtk_calendar_select_month(GTK_CALENDAR(calendar), res.mois - 1, res.annee);
gtk_calendar_select_day(GTK_CALENDAR(calendar), res.jour);
}


void
on_SO_modifier_button_clicked          (GtkWidget       *button,
                                        gpointer         user_data)
{
    Reservation res;
    GtkWidget *id_personnel, *id_reservation, *id_parking;
    GtkWidget *heure_debut, *minute, *duree, *type;
    GtkWidget *calendar;
	char id_res_modif[10];

   
    id_personnel = lookup_widget(button, "SO_id_modif_entry");
    id_reservation = lookup_widget(button, "SO_id_res_modif_entry");
    id_parking = lookup_widget(button, "SO_parking_modif_entry");
    heure_debut = lookup_widget(button, "SO_heure_modif_spinbutton");
    minute = lookup_widget(button, "SO_minute_modif_spinbutton");
    duree = lookup_widget(button, "SO_duree_modif_spinbutton");
    type = lookup_widget(button, "SO_type_vehicule_modif_combobox");
    calendar = lookup_widget(button, "calendar_modif");

   
    strcpy(id_res_modif, gtk_entry_get_text(GTK_ENTRY(id_reservation)));
    strcpy(res.id_personnel, gtk_entry_get_text(GTK_ENTRY(id_personnel)));
    strcpy(res.id_reservation, gtk_entry_get_text(GTK_ENTRY(id_reservation)));
    strcpy(res.id_parking, gtk_entry_get_text(GTK_ENTRY(id_parking)));
    res.heure_debut = gtk_spin_button_get_value_as_int(GTK_SPIN_BUTTON(heure_debut));
    res.minute_debut = gtk_spin_button_get_value_as_int(GTK_SPIN_BUTTON(minute));
    res.duree = gtk_spin_button_get_value_as_int(GTK_SPIN_BUTTON(duree));
  strcpy(res.type_vehicule , gtk_combo_box_get_active_text(GTK_COMBO_BOX(type)));
  if (mode_paiement_modif == 1) {strcpy(res.mode_paiement,"espece");}
  else {strcpy(res.mode_paiement,"bancaire");}
    gtk_calendar_get_date(GTK_CALENDAR(calendar), &res.annee, &res.mois, &res.jour);
    res.mois += 1; 

    
    modifier_reservation("reservation.txt",id_res_modif, res);

    
    GtkWidget *dialog = gtk_message_dialog_new(GTK_WINDOW(gtk_widget_get_toplevel(button)),
                                               GTK_DIALOG_DESTROY_WITH_PARENT,
                                               GTK_MESSAGE_INFO,
                                               GTK_BUTTONS_OK,
                                               "La réservation a été modifiée avec succès.");
    gtk_dialog_run(GTK_DIALOG(dialog));
    gtk_widget_destroy(dialog);
}


void
on_SO_espece_modif_radiobutton_toggled (GtkToggleButton *togglebutton,
                                        gpointer         user_data)
{
if (gtk_toggle_button_get_active(GTK_TOGGLE_BUTTON (togglebutton)))
	mode_paiement_modif = 1;
}


void
on_SO_bancaire_modif_radiobutton_toggled
                                        (GtkToggleButton *togglebutton,
                                        gpointer         user_data)
{
if (gtk_toggle_button_get_active(GTK_TOGGLE_BUTTON (togglebutton)))
	mode_paiement_modif = 2;
}


void
on_SO_sup_res_button_clicked           (GtkWidget      *button,
                                        gpointer         user_data)
{
    char id_reservation[10];
    GtkWidget *id_res_widget;

    
    id_res_widget = lookup_widget(button, "SO_id_res_supp_entry");

    
    strcpy(id_reservation, gtk_entry_get_text(GTK_ENTRY(id_res_widget)));

    
    if (supprimer_reservation("reservation.txt", id_reservation)) {
        
        GtkWidget *dialog = gtk_message_dialog_new(GTK_WINDOW(gtk_widget_get_toplevel(button)),
                                                   GTK_DIALOG_DESTROY_WITH_PARENT,
                                                   GTK_MESSAGE_INFO,
                                                   GTK_BUTTONS_OK,
                                                   "La réservation a été supprimée avec succès.");
        gtk_dialog_run(GTK_DIALOG(dialog));
        gtk_widget_destroy(dialog);
    } else {
        
        GtkWidget *dialog = gtk_message_dialog_new(GTK_WINDOW(gtk_widget_get_toplevel(button)),
                                                   GTK_DIALOG_DESTROY_WITH_PARENT,
                                                   GTK_MESSAGE_ERROR,
                                                   GTK_BUTTONS_OK,
                                                   "Erreur : La réservation n'a pas été trouvée.");
        gtk_dialog_run(GTK_DIALOG(dialog));
        gtk_widget_destroy(dialog);
    }
}


void
on_SO_rech_affiche_res_button_clicked  (GtkWidget       *button,
                                        gpointer         user_data)
{
GtkWidget *id_res;
 GtkWidget *treeview;
    GtkListStore *store;
    GtkTreeIter iter;
    GtkCellRenderer *renderer;
    GtkTreeViewColumn *column;
FILE *f;

    
    treeview = lookup_widget(button, "treeview1");
    id_res = lookup_widget(button,"SO_id_res_affiche_entry");
char id_res_rech[50];
strcpy(id_res_rech,gtk_entry_get_text(GTK_ENTRY(id_res)));
    
    if (gtk_tree_view_get_model(GTK_TREE_VIEW(treeview)) == NULL) {
        renderer = gtk_cell_renderer_text_new();

        column = gtk_tree_view_column_new_with_attributes("ID Réservation", renderer, "text", 0, NULL);
        gtk_tree_view_append_column(GTK_TREE_VIEW(treeview), column);

        column = gtk_tree_view_column_new_with_attributes("ID Personnel", renderer, "text", 1, NULL);
        gtk_tree_view_append_column(GTK_TREE_VIEW(treeview), column);

        column = gtk_tree_view_column_new_with_attributes("ID Parking", renderer, "text", 2, NULL);
        gtk_tree_view_append_column(GTK_TREE_VIEW(treeview), column);

        column = gtk_tree_view_column_new_with_attributes("Heure", renderer, "text", 3, NULL);
        gtk_tree_view_append_column(GTK_TREE_VIEW(treeview), column);

        column = gtk_tree_view_column_new_with_attributes("Minute", renderer, "text", 4, NULL);
        gtk_tree_view_append_column(GTK_TREE_VIEW(treeview), column);

        column = gtk_tree_view_column_new_with_attributes("Durée", renderer, "text", 5, NULL);
        gtk_tree_view_append_column(GTK_TREE_VIEW(treeview), column);

        column = gtk_tree_view_column_new_with_attributes("Type Véhicule", renderer, "text", 6, NULL);
        gtk_tree_view_append_column(GTK_TREE_VIEW(treeview), column);

column = gtk_tree_view_column_new_with_attributes("Mode de paiement", renderer, "text", 7, NULL);
        gtk_tree_view_append_column(GTK_TREE_VIEW(treeview), column);

        column = gtk_tree_view_column_new_with_attributes("Jour", renderer, "text", 8, NULL);
        gtk_tree_view_append_column(GTK_TREE_VIEW(treeview), column);

        column = gtk_tree_view_column_new_with_attributes("Mois", renderer, "text", 9, NULL);
        gtk_tree_view_append_column(GTK_TREE_VIEW(treeview), column);

        column = gtk_tree_view_column_new_with_attributes("Année", renderer, "text", 10, NULL);
        gtk_tree_view_append_column(GTK_TREE_VIEW(treeview), column);
    }

    
    store = gtk_list_store_new(11, G_TYPE_STRING, G_TYPE_STRING, G_TYPE_STRING, G_TYPE_INT, G_TYPE_INT, G_TYPE_INT, G_TYPE_STRING, G_TYPE_STRING, G_TYPE_INT, G_TYPE_INT, G_TYPE_INT);

    
    Reservation reservations;
f = fopen("reservation.txt","r");
if(f == NULL){return;}
else {
f = fopen("reservation.txt","a+");
while(fscanf(f, "%s %s %s %d %d %d %d %d %d %s %s\n", reservations.id_personnel, reservations.id_reservation, reservations.id_parking, &reservations.jour, &reservations.mois, &reservations.annee, &reservations.heure_debut, &reservations.minute_debut, &reservations.duree, reservations.type_vehicule, reservations.mode_paiement)!= EOF){
if (strcmp(reservations.id_reservation,id_res_rech)==0){
gtk_list_store_append(store, &iter);
gtk_list_store_set(store, &iter,
                           0, reservations.id_reservation,
                           1, reservations.id_personnel,
                           2, reservations.id_parking,
                           3, reservations.heure_debut,
                           4, reservations.minute_debut,
                           5, reservations.duree,
                           6, reservations.type_vehicule,
    7, reservations.mode_paiement,
                           8, reservations.jour,
                           9, reservations.mois,
                           10, reservations.annee,
                           -1);
}
}
fclose(f);
gtk_tree_view_set_model(GTK_TREE_VIEW(treeview), GTK_TREE_MODEL(store));
g_object_unref(store);
}
}


void
on_SO_affiche_res_button_clicked       (GtkWidget       *button,
                                        gpointer         user_data)
{
 GtkWidget *treeview;
    GtkListStore *store;
    GtkTreeIter iter;
    GtkCellRenderer *renderer;
    GtkTreeViewColumn *column;
	FILE *f;

    
    treeview = lookup_widget(button, "treeview1");

    
    if (gtk_tree_view_get_model(GTK_TREE_VIEW(treeview)) == NULL) {
        renderer = gtk_cell_renderer_text_new();

        column = gtk_tree_view_column_new_with_attributes("ID Réservation", renderer, "text", 0, NULL);
        gtk_tree_view_append_column(GTK_TREE_VIEW(treeview), column);

        column = gtk_tree_view_column_new_with_attributes("ID Personnel", renderer, "text", 1, NULL);
        gtk_tree_view_append_column(GTK_TREE_VIEW(treeview), column);

        column = gtk_tree_view_column_new_with_attributes("ID Parking", renderer, "text", 2, NULL);
        gtk_tree_view_append_column(GTK_TREE_VIEW(treeview), column);

        column = gtk_tree_view_column_new_with_attributes("Heure", renderer, "text", 3, NULL);
        gtk_tree_view_append_column(GTK_TREE_VIEW(treeview), column);

        column = gtk_tree_view_column_new_with_attributes("Minute", renderer, "text", 4, NULL);
        gtk_tree_view_append_column(GTK_TREE_VIEW(treeview), column);

        column = gtk_tree_view_column_new_with_attributes("Durée", renderer, "text", 5, NULL);
        gtk_tree_view_append_column(GTK_TREE_VIEW(treeview), column);

        column = gtk_tree_view_column_new_with_attributes("Type Véhicule", renderer, "text", 6, NULL);
        gtk_tree_view_append_column(GTK_TREE_VIEW(treeview), column);

	column = gtk_tree_view_column_new_with_attributes("Mode de paiement", renderer, "text", 7, NULL);
        gtk_tree_view_append_column(GTK_TREE_VIEW(treeview), column);

        column = gtk_tree_view_column_new_with_attributes("Jour", renderer, "text", 8, NULL);
        gtk_tree_view_append_column(GTK_TREE_VIEW(treeview), column);

        column = gtk_tree_view_column_new_with_attributes("Mois", renderer, "text", 9, NULL);
        gtk_tree_view_append_column(GTK_TREE_VIEW(treeview), column);

        column = gtk_tree_view_column_new_with_attributes("Année", renderer, "text", 10, NULL);
        gtk_tree_view_append_column(GTK_TREE_VIEW(treeview), column);
    }

   
    store = gtk_list_store_new(11, G_TYPE_STRING, G_TYPE_STRING, G_TYPE_STRING, G_TYPE_INT, G_TYPE_INT, G_TYPE_INT, G_TYPE_STRING, G_TYPE_STRING, G_TYPE_INT, G_TYPE_INT, G_TYPE_INT);

    
    Reservation reservations;
	f = fopen("reservation.txt","r");
if(f == NULL){return;}
else {
f = fopen("reservation.txt","a+");
while(fscanf(f, "%s %s %s %d %d %d %d %d %d %s %s\n", reservations.id_personnel, reservations.id_reservation, reservations.id_parking, &reservations.jour, &reservations.mois, &reservations.annee, &reservations.heure_debut, &reservations.minute_debut, &reservations.duree, reservations.type_vehicule, reservations.mode_paiement)!= EOF){
gtk_list_store_append(store, &iter);
gtk_list_store_set(store, &iter,
                           0, reservations.id_reservation,
                           1, reservations.id_personnel,
                           2, reservations.id_parking,
                           3, reservations.heure_debut,
                           4, reservations.minute_debut,
                           5, reservations.duree,
                           6, reservations.type_vehicule,
 			   7, reservations.mode_paiement,
                           8, reservations.jour,
                           9, reservations.mois,
                           10, reservations.annee,
                           -1);
}
fclose(f);
gtk_tree_view_set_model(GTK_TREE_VIEW(treeview), GTK_TREE_MODEL(store));
g_object_unref(store);
}
    
}


void
on_SO_trier_button_clicked             (GtkWidget       *button,
                                        gpointer         user_data)
{
GtkWidget *treeview;
    GtkListStore *store;
    GtkTreeIter iter;
    GtkCellRenderer *renderer;
    GtkTreeViewColumn *column;
	FILE *f;

   
    treeview = lookup_widget(button, "treeview2");

    
    if (gtk_tree_view_get_model(GTK_TREE_VIEW(treeview)) == NULL) {
        renderer = gtk_cell_renderer_text_new();

        column = gtk_tree_view_column_new_with_attributes("ID Parking", renderer, "text", 0, NULL);
        gtk_tree_view_append_column(GTK_TREE_VIEW(treeview), column);

        column = gtk_tree_view_column_new_with_attributes("Nom", renderer, "text", 1, NULL);
        gtk_tree_view_append_column(GTK_TREE_VIEW(treeview), column);

        column = gtk_tree_view_column_new_with_attributes("Adresse", renderer, "text", 2, NULL);
        gtk_tree_view_append_column(GTK_TREE_VIEW(treeview), column);

        column = gtk_tree_view_column_new_with_attributes("capacite", renderer, "text", 3, NULL);
        gtk_tree_view_append_column(GTK_TREE_VIEW(treeview), column);

        column = gtk_tree_view_column_new_with_attributes("Places libres", renderer, "text", 4, NULL);
        gtk_tree_view_append_column(GTK_TREE_VIEW(treeview), column);

        column = gtk_tree_view_column_new_with_attributes("Type parking", renderer, "text", 5, NULL);
        gtk_tree_view_append_column(GTK_TREE_VIEW(treeview), column);


    }

   
    store = gtk_list_store_new(6, G_TYPE_STRING, G_TYPE_STRING, G_TYPE_STRING, G_TYPE_INT, G_TYPE_INT, G_TYPE_STRING);


 Parking p;
	f = fopen("parking.txt","r");
if(f == NULL){return;}
else {
f = fopen("parking.txt","a+");
while(fscanf(f, "%s %s %s %d %d %s\n", p.id_parking, p.nom, p.adresse, &p.capacite, &p.places_libres, p.type_parking)!= EOF){
gtk_list_store_append(store, &iter);
gtk_list_store_set(store, &iter,
                           0, p.id_parking,
                           1, p.nom,
                           2, p.adresse,
                           3, p.capacite,
                           4, p.places_libres,
                           5, p.type_parking,
                           -1);
}
GtkTreeSortable *sortable = GTK_TREE_SORTABLE(store);
gtk_tree_sortable_set_sort_column_id(sortable, 4, GTK_SORT_DESCENDING);
fclose(f);




gtk_tree_view_set_model(GTK_TREE_VIEW(treeview), GTK_TREE_MODEL(store));
g_object_unref(store);
}
}


void
on_SO_affiche_parking_acceuil_button_clicked
                                        (GtkWidget       *button,
                                        gpointer         user_data)
{
GtkNotebook *notebook;
notebook = GTK_NOTEBOOK(lookup_widget(button, "notebook1"));
gtk_notebook_set_current_page(notebook, 6);
}


void
on_SO_acceuil_from_ajout_button_clicked
                                        (GtkWidget       *button,
                                        gpointer         user_data)
{
GtkNotebook *notebook;
notebook = GTK_NOTEBOOK(lookup_widget(button, "notebook1"));
gtk_notebook_set_current_page(notebook, 1);
}


void
on_SO_acceuil_from_modif_button_clicked
                                        (GtkWidget       *button,
                                        gpointer         user_data)
{
GtkNotebook *notebook;
notebook = GTK_NOTEBOOK(lookup_widget(button, "notebook1"));
gtk_notebook_set_current_page(notebook, 1);
}


void
on_SO_acceuil_from_supp_button_clicked (GtkWidget       *button,
                                        gpointer         user_data)
{
GtkNotebook *notebook;
notebook = GTK_NOTEBOOK(lookup_widget(button, "notebook1"));
gtk_notebook_set_current_page(notebook, 1);
}


void
on_SO_acceuil_from_affiche_button_clicked
                                        (GtkWidget       *button,
                                        gpointer         user_data)
{
GtkNotebook *notebook;
notebook = GTK_NOTEBOOK(lookup_widget(button, "notebook1"));
gtk_notebook_set_current_page(notebook, 1);
}


void
on_SO_acceuil_from_tri_button_clicked  (GtkWidget       *button,
                                        gpointer         user_data)
{
GtkNotebook *notebook;
notebook = GTK_NOTEBOOK(lookup_widget(button, "notebook1"));
gtk_notebook_set_current_page(notebook, 1);
}


void
on_SO_deconnexion_button_clicked       (GtkWidget       *button,
                                        gpointer         user_data)
{
GtkWidget *input1, *input2;
GtkNotebook *notebook;
input1 = lookup_widget(button, "SO_id_auth_entry");
input2 = lookup_widget(button, "SO_mdp_auth_entry");


gtk_entry_set_text(GTK_ENTRY(input1),"");
gtk_entry_set_text(GTK_ENTRY(input2),"");
notebook = GTK_NOTEBOOK(lookup_widget(button, "notebook1"));
gtk_notebook_set_current_page(notebook, 0);
}
